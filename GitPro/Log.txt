关于ElementUI 和 Element-Plus 中 input 组件的使用区别
ElementUI 修改背景颜色  .Maclass >>> .el-input__inner { background : color }
Element-Plus 修改背景颜色 :deep(.el-input__wrapper) { background : color }
[Waring] the >>> and /deep/ combinators have been deprecated. use :deep() instead.  Vue3 使用:deep()做深度选择

<script lang="ts" setup></script>中使用路由导航的方法
import { useRouter } from 'vue-router'  //引用
const router = useRouter();
router.push({
    path: '/home'
})     
注： 编程式导航route.push与声明式导航<router-link to=""></router-link>是等价的

ElementUI 与 Element-Plus 的具体组件命名
#大体没有大区别，细微之处需要查看官网，移植十分麻烦
[Waring]ElementUI:<el-submenu> 与 Element-Plus:<el-sub-menu>
[Waring]ElementUI:<i class="el-icon-coin"></i> 与 Element-Plus:<el-icon><location /></el-icon>  icon差异最大，plus还要重新引入

关于ElementPlus中菜单弹出框的宽度调整问题，默认值为200px
特别注意：ElementPlus中上述弹出框的位置挂载在index.html的body下，与<id="app">的位置是并列的
因此在<scope>的影响下，在页面添加的具体样式，如.el-menu--popup{min-width: 155px;}是不会作用到pop窗口的？
同理在index.html的<style>下添加可以作用  ----即全局样式
解决方案：用独特类名（防止全局污染），使用popper-class属性挂载（Element-Plus特性）

2022/8/10
关于Chrome以及Edge自动填写账号密码时，input框出现白色底框的原因
浏览器自动填写账号密码之后，会为input自动添加一个类，在Debug区可以查看 类名[:-internal-autofill-selected] 注意其下内容中的[!import]
因此在本例可以选择如下解决办法：
:deep(.el-input :-internal-autofill-selected){
    -webkit-text-fill-color: #fff !important;
    transition: background-color 5000s ease-in-out 0s !important;
    box-shadow: none;
}
新问题：Elment-Plus不能完全响应以上修改，最后input框会出现白色边框，白色边框的修改如下：
:deep(.el-input__wrapper) {
    box-shadow: none;
}
不是边框的宽度，也不是内外边距，试过了所有关于border的设置，最后发现是阴影；
完成input框与背景的纯色融合，想增加交互性可以设置[.el-input__wrapper.is-focus] 和 [.el-input__wrapper:hover]两个属性，具体参考[Login.vue]

[Vue Waring]Invalid event arguments: event validation failed for event "click"
[Vue Waring]Invalid event arguments: event validation failed for event "select"
该警告出现在el-menu中的el-menu-item中，当每个item没有"唯一"标识时会出现以上警告，例如可以为每个item添加index
<el-menu-item index="2-1">game1</el-menu-item>
无效的事件参数:事件“点击”的事件验证失败...

String.replace
replace() 方法返回一个由替换值（replacement）替换部分或所有的模式（pattern）匹配项后的新字符串。
模式可以是一个字符串或者一个正则表达式，替换值可以是一个字符串或者一个每次匹配都要调用的回调函数。
如果pattern是字符串，则仅替换第一个匹配项。
注意返回的是新字符串而且不会修改原字符串。
squaresArray[currentIndex].class.replace("frog"," ") //原值squaresArray[currentIndex].class不会改变
squaresArray[currentIndex].class = squaresArray[currentIndex].class.replace("frog"," ") //需要重新赋值则会改变

v-for可以取整数
<div>
    <span v-for="n in 10">{{ n }} </span>
</div>

Echart的使用
npm安装完后在具体页面   import * as echarts from 'echarts'  全部引入，也可以按需
Echart对dom的绑定要在 onMounted(() => {//Init()}) 中,也就是组件加载完后，否则报错
绑定方法  var myChart = echarts.init(chartDiv.value as HTMLElement);
[Vue Waring]Unhandled error during execution of scheduler flush. This is likely a Vue internals bug.

Echart的更新
在dom更新之后，Echart不会重新渲染，所以需要在 onUpdated(() => {//Init()}) 中重新渲染视图
热更新只会更改dom的属性，Echart的重新渲染还是需要重新加载页面？

Echart按需引入的方法参考
1. 引入echarts核心模块
import * as echarts from 'echarts/core'
2. 引入具体图表组件，后缀都为Chart；引入该图表组件对应的数据格式，后缀为SeriesOption
import {
    ThemeRiverChart,
    ThemeRiverSeriesOption
} from 'echarts/charts';
3. 引入渲染器，CanvasRenderer 或者 SVGRenderer，必须引入其中一个
import {
    CanvasRenderer
} from 'echarts/renderers';
4. 注册使用的组件
echarts.use(
    [SingleAxisComponent, TooltipComponent, LegendComponent, ThemeRiverChart, CanvasRenderer]
);
(TS)5*. TS 组装具体的数据技巧方法，后缀为Option
type EChartsOption = echarts.ComposeOption<
    SingleAxisComponentOption | TooltipComponentOption | LegendComponentOption | ThemeRiverSeriesOption
>

Tomcat10.0，离线部署好的ArcGIS JS API放大缩小按钮不显示
1.起初怀疑是css文件没有加载成功，后来注释了 css: `${AGS_SDK}/esri/themes/light/main.css` 发现并不是
2.搜索之后发现配置Access-Control-Allow-***可以解决问题，但原文是IIS配置下的，于是搜索Tomcat的配置解决
3.最后解决方案就是在tomcat目录下 ../Tomcat10.0/conf/web.xml  , 修改添加以下内容
<filter>
		<filter-name>CorsFilter</filter-name>
		<filter-class>org.apache.catalina.filters.CorsFilter</filter-class>
		<init-param>
			<param-name>cors.allowed.origins</param-name>
			<param-value>*</param-value>
		</init-param>
		<init-param>
			<param-name>cors.allowed.methods</param-name>
			<param-value>GET,POST,HEAD,OPTIONS,PUT</param-value>
		</init-param>
		<init-param>
			<param-name>cors.allowed.headers</param-name>
			<param-value>Content-Type,X-Requested-With,accept,Origin,Access-Control-Request-Method,Access-Control-Request-Headers</param-value>
		</init-param>
		<init-param>
			<param-name>cors.exposed.headers</param-name>
			<param-value>Access-Control-Allow-Origin,Access-Control-Allow-Credentials</param-value>
		</init-param>
		<init-param>
			<param-name>cors.support.credentials</param-name>
			<param-value>false</param-value>
		</init-param>
		<init-param>
			<param-name>cors.preflight.maxage</param-name>
			<param-value>10</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>CorsFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
行数在4700左右，就是最后标签的前面就可以，重启服务发现问题已解决。
(连带着加载地图时的一堆跨域报错也没了，如果挂了梯子还是跨域报错，不挂就不会，但是目前来看两者都不影响使用，浏览器安全策略的特性)

2022/9/9
关于esri-loader和@arcgis/core
1. 先说一下esri-loader，可以去请求在线的js，然后loadMoudle，就是可能会比较慢，确实不方便，感觉初学需要省事了解可以试试，一个html就行了
2. 更好的就是从官网上下载离线包部署下，个人计算机用tomcat或者IIS都可以，项目同样的，大概请求会快些
3. 由于内网中服务器在自己的手上，所以跨域响应可以自己来定义，终于不用被控制台那一堆红色的东西糟心了哈哈
4. 最后就是代码的写法了，vue3运行一个地图要等dom完全加载后在绑定视图和地图，所以逻辑一般都在 onMounted() 中，其他的写法还要继续学习

1. @arcgis/core 上线时间不长，使用的感觉还不错，重点是和官网的例子无缝接轨，拿来就可以用了，用来学习是十分不错的
2. 同样逻辑一般都在dom加载之后实现，不然控制台不会报错也不会显示地图！
3. 例子中的很多地图在加载的时候控制台还是会出现很多的错误信息，但是地图加载又没有问题，问题暂时搁置，可能是我的网不好
4. 申请完API_Key后就可以使用很多其他baseMap了，奇妙的是同样的代码，有key和没有key的控制台完全不一样...有key的控制台几乎不会报错...
5. 贴一下官网上的，有些图挺好看的
					With API Keys
  Value                                       Source
arcgis-imagery	                          Imagery Hybrid
arcgis-imagery-standard	                  Imagery
arcgis-imagery-labels	                  The reference layer from arcgis-imagery
arcgis-light-gray	                      Light Gray Canvas
arcgis-dark-gray	                      Dark Gray Canvas
arcgis-navigation	                      Navigation
arcgis-navigation-night	                  Navigation (Night)
arcgis-streets	                          Streets
arcgis-streets-night	                  Streets (Night)
arcgis-streets-relief	                  Streets (with Relief)
arcgis-topographic	                      Topographic
arcgis-oceans	                          Oceans
osm-standard	                          OpenStreetMap
osm-standard-relief	                      OpenStreetMap (with Relief)
osm-streets	                              OpenStreetMap (Streets)
osm-streets-relief	                      OpenStreetMap (Streets with Relief)
osm-light-gray	                          OpenStreetMap (Light Gray Canvas)
osm-dark-gray	                          OpenStreetMap (Dark Gray Canvas)
arcgis-terrain	                          Terrain with Labels
arcgis-community	                      Community Map
arcgis-charted-territory	              Charted Territory Map
arcgis-colored-pencil	                  Colored Pencil Map
arcgis-nova	                              Nova Map
arcgis-modern-antique	                  Modern Antique Map
arcgis-midcentury	                      Mid-Century Map
arcgis-newspaper	                      Newspaper Map
arcgis-hillshade-light	                  The hillshade layer from arcgis-topographic
arcgis-hillshade-dark
                    Without API Keys
	Value                                      Source
satellite	                              World Imagery
hybrid	                                  Hybrid Reference Layer and World Imagery
oceans	                                  World Ocean Reference and World Ocean Base
osm	                                      OpenStreetMapLayer
terrain	                                  World Reference Overlay and World Terrain Base
dark-gray-vector	                      Dark Gray Canvas
gray-vector	                              Light Gray Canvas
streets-vector	                          World Street Map
streets-night-vector	                  World Street Map (Night)
streets-navigation-vector	              World Navigation Map
topo-vector	                              World Hillshade and World Topographic Map
streets-relief-vector	                  World Hillshade and World Street Map (with Relief)
topo (deprecated)	                      This basemap/service is now in Mature Support and is no longer updated. Please use topo-vector instead. World Topo Map
streets (deprecated)	                  This basemap/service is now in Mature Support and is no longer updated. Please use streets-vector instead. World Street Map
dark-gray (deprecated)	                  This basemap/service is now in Mature Support and is no longer updated. Please use dark-gray-vector instead. World Dark Gray Reference and World Dark Gray Base
gray (deprecated)	                      This basemap/service is now in Mature Support and is no longer updated. Please use gray-vector instead. World Light Gray Reference and World Light Gray Base
national-geographic (deprecated)	      This basemap/service is now in Mature Support and is no longer updated. Please use the National Geographic Style WebMap instead. NatGeo World Map
